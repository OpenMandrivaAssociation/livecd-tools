diff -dNur livecd-tools-031.old/imgcreate/fs.py livecd-tools-031/imgcreate/fs.py
--- livecd-tools-031.old/imgcreate/fs.py	2010-07-29 16:37:04.436014560 +0400
+++ livecd-tools-031/imgcreate/fs.py	2010-07-30 16:31:26.228738761 +0400
@@ -41,7 +41,8 @@
             raise
 
 def mksquashfs(in_img, out_img):
-    args = ["/sbin/mksquashfs", in_img, out_img]
+    #args = ["/sbin/mksquashfs", in_img, out_img]
+    args = ["/usr/bin/mksquashfs", in_img, out_img]
 
     if not sys.stdout.isatty():
         args.append("-no-progress")
@@ -89,6 +90,7 @@
 
         if not dest:
             dest = src
+
         self.dest = self.root + "/" + dest
 
         self.mounted = False
@@ -108,7 +110,7 @@
         if not self.mounted:
             return
 
-        rc = subprocess.call(["/bin/umount", self.dest])
+        rc = subprocess.call(["/bin/umount", "-l", self.dest])
         if rc != 0:
             raise MountError("Unable to unmount filesystem at %s" % self.dest)
         self.mounted = False
diff -dNur livecd-tools-031.old/imgcreate/kickstart.py livecd-tools-031/imgcreate/kickstart.py
--- livecd-tools-031.old/imgcreate/kickstart.py	2010-07-29 16:37:04.425011240 +0400
+++ livecd-tools-031/imgcreate/kickstart.py	2010-07-30 16:31:26.229738761 +0400
@@ -472,7 +472,7 @@
         return default
     return int(ks.handler.bootloader.timeout)
 
-def get_kernel_args(ks, default = "ro liveimg quiet"):
+def get_kernel_args(ks, default = "ro liveimg"):
     if not hasattr(ks.handler.bootloader, "appendLine"):
         return default
     if ks.handler.bootloader.appendLine is None:
diff -dNur livecd-tools-031.old/imgcreate/live.py livecd-tools-031/imgcreate/live.py
--- livecd-tools-031.old/imgcreate/live.py	2010-07-29 16:37:04.436014560 +0400
+++ livecd-tools-031/imgcreate/live.py	2010-07-30 16:44:30.853739041 +0400
@@ -1,4 +1,4 @@
-#
+# -*- coding: utf-8 -*-
 # live.py : LiveImageCreator class for creating Live CD images
 #
 # Copyright 2007, Red Hat  Inc.
@@ -18,10 +18,12 @@
 
 import os
 import os.path
+import sys
 import glob
 import shutil
 import subprocess
 import logging
+from menuconfig import MenuConfig
 
 from imgcreate.errors import *
 from imgcreate.fs import *
@@ -98,9 +100,9 @@
         """
         r = kickstart.get_kernel_args(self.ks)
         if os.path.exists(self._instroot + "/usr/bin/rhgb"):
-            r += " rhgb"
+            r += ""
         if os.path.exists(self._instroot + "/usr/bin/plymouth"):
-            r += " rhgb"
+            r += ""
         return r
         
     def _get_mkisofs_options(self, isodir):
@@ -212,7 +214,7 @@
             makedirs(os.path.dirname(path))
         f = open(path, "a")
 
-        f.write('LIVEOS="yes"\n')
+        #f.write('LIVEOS="yes"\n')
         f.write('PROBE="no"\n')
         f.write('MODULES+="squashfs ext4 ext3 ext2 vfat msdos "\n')
         f.write('MODULES+="sr_mod sd_mod ide-cd cdrom "\n')
@@ -301,6 +303,13 @@
 
 class x86LiveImageCreator(LiveImageCreatorBase):
     """ImageCreator for x86 machines"""
+
+    def __init__(self, *args, **kwargs):
+      if 'menu_cfg_path' in kwargs:
+        self.menu_config = MenuConfig(kwargs["menu_cfg_path"])
+
+      LiveImageCreatorBase.__init__(self, *args)
+
     def _get_mkisofs_options(self, isodir):
         return [ "-b", "isolinux/isolinux.bin",
                  "-c", "isolinux/boot.cat",
@@ -331,6 +340,9 @@
 
         return "mboot.c32"
 
+    def __copy_rus_font(self, isodir, font_path):
+        shutil.copy(font_path, isodir + "/isolinux/")               
+
     def __copy_syslinux_files(self, isodir, menu, mboot = None):
         files = ["isolinux.bin", menu]
         if mboot:
@@ -348,9 +360,18 @@
             shutil.copy(path, isodir + "/isolinux/")
 
     def __copy_syslinux_background(self, isodest):
-        background_path = self._instroot + \
-                          "/usr/lib/anaconda-runtime/syslinux-vesa-splash.jpg"
 
+        if self.menu_config:
+            if self.menu_config.menu_background_path:
+                background_path = self.menu_config.menu_background_path
+            else:
+                background_path = self._instroot + \
+                                  "/usr/lib/anaconda-runtime/syslinux-vesa-splash.jpg"
+        else:
+
+            background_path = self._instroot + \
+                              "/usr/lib/anaconda-runtime/syslinux-vesa-splash.jpg"
+  
         if not os.path.exists(background_path):
             return False
 
@@ -394,12 +417,25 @@
         return False
 
     def __get_basic_syslinux_config(self, **args):
+        if self.ks.handler.lang.lang == "ru_RU.UTF-8":
+            args.update({'tabmsg': u"Нажмите [Tab] чтобы изменить опции.",
+                         'autobootmsg': u"Автоматическая загрузка через # секунд{у,ы,}",
+                         'passprompt': u"Введите пароль"})
+        else:
+            args.update({'tabmsg': u"Press [Tab] to edit options",
+                         'autobootmsg': u"Automatic boot in # second{,s}...",
+                         'passprompt': u"Password required"})
+
         return """
 default %(menu)s
+font %(font_name)s
 timeout %(timeout)d
 
 %(background)s
-menu title Welcome to %(name)s!
+menu title %(welcome_message)s %(name)s!
+menu tabmsg %(tabmsg)s
+menu passprompt %(passprompt)s
+menu autoboot %(autobootmsg)s
 menu color border 0 #ffffffff #00000000
 menu color sel 7 #ffffffff #ff000000
 menu color title 0 #ffffffff #00000000
@@ -410,8 +446,6 @@
 menu color timeout_msg 0 #ffffffff #00000000
 menu color timeout 0 #ffffffff #00000000
 menu color cmdline 0 #ffffffff #00000000
-menu hidden
-menu hiddenrow 5
 """ % args
 
     def __get_image_stanza(self, is_xen, isDracut, **args):
@@ -455,41 +489,54 @@
 
             default = self.__is_default_kernel(kernel, kernels)
 
-            if default:
-                long = "Boot"
-            elif kernel.startswith("kernel-"):
-                long = "Boot %s(%s)" % (self.name, kernel[7:])
+            if self.menu_config:
+
+                extra_items = self.menu_config.menu_lst
+                for label, extra_options in extra_items:
+                    cfg += self.__get_image_stanza(is_xen, isDracut, fslabel = self.fslabel,
+                                                   isofstype = "auto",
+                                                   liveargs = kernel_options,
+                                                   long = label,
+                                                   short = "linux" + index,
+                                                   extra = extra_options,
+                                                   index = index)
             else:
-                long = "Boot %s(%s)" % (self.name, kernel)
 
+                                if default:
+                                        long = "Boot"
+                                elif kernel.startswith("kernel-"):
+                                        long = "Boot %s(%s)" % (self.name, kernel[7:])
+                                else:
+                                        long = "Boot %s(%s)" % (self.name, kernel)
 
-            # tell dracut not to ask for LUKS passwords or activate mdraid sets
-            if isDracut:
-                kern_opts = kernel_options + " rd_NO_LUKS rd_NO_MD noiswmd"
-            else:
-                kern_opts = kernel_options
 
-            cfg += self.__get_image_stanza(is_xen, isDracut,
-                                           fslabel = self.fslabel,
-                                           isofstype = "auto",
-                                           liveargs = kern_opts,
-                                           long = long,
-                                           short = "linux" + index,
-                                           extra = "",
-                                           index = index)
+                                # tell dracut not to ask for LUKS passwords or activate mdraid sets
+                                if isDracut:
+                                        kern_opts = kernel_options + " rd_NO_LUKS rd_NO_MD noiswmd"
+                                else:
+                                        kern_opts = kernel_options
 
-            if default:
-                cfg += "menu default\n"
+                                cfg += self.__get_image_stanza(is_xen, isDracut,
+                                                                                           fslabel = self.fslabel,
+                                                                                           isofstype = "auto",
+                                                                                           liveargs = kern_opts,
+                                                                                           long = long,
+                                                                                           short = "linux" + index,
+                                                                                           extra = "",
+                                                                                           index = index)
 
-            if checkisomd5:
-                cfg += self.__get_image_stanza(is_xen, isDracut,
-                                               fslabel = self.fslabel,
-                                               isofstype = "auto",
-                                               liveargs = kernel_options,
-                                               long = "Verify and " + long,
-                                               short = "check" + index,
-                                               extra = "check",
-                                               index = index)
+                                if default:
+                                        cfg += "menu default\n"
+
+                                if checkisomd5:
+                                        cfg += self.__get_image_stanza(is_xen, isDracut,
+                                                                                                   fslabel = self.fslabel,
+                                                                                                   isofstype = "auto",
+                                                                                                   liveargs = kernel_options,
+                                                                                                   long = "Verify and " + long,
+                                                                                                   short = "check" + index,
+                                                                                                   extra = "check",
+                                                                                                   index = index)
 
             index = str(int(index) + 1)
 
@@ -517,6 +564,22 @@
         """configure the boot loader"""
         makedirs(isodir + "/isolinux")
 
+        if self.menu_config.rus_font_path:
+          self.__copy_rus_font(isodir, self.menu_config.rus_font_path)
+          font_name = self.menu_config.rus_font_path.split('/')[-1]
+        else:
+          font_name = ""
+
+        if self.menu_config.product_name:
+          product_name = self.menu_config.product_name
+        else:
+          product_name = self.name
+
+        if self.menu_config.welcome_message:
+          welcome_message = self.menu_config.welcome_message
+        else:
+          welcome_message = "Welcome to"
+
         menu = self.__find_syslinux_menu()
 
         self.__copy_syslinux_files(isodir, menu,
@@ -528,16 +591,20 @@
 
         cfg = self.__get_basic_syslinux_config(menu = menu,
                                                background = background,
-                                               name = self.name,
-                                               timeout = self._timeout * 10)
+                                               name = product_name,
+                                               timeout = self._timeout * 10,
+	                                       font_name = font_name,
+					       welcome_message = welcome_message )
+
 
         cfg += self.__get_image_stanzas(isodir)
         cfg += self.__get_memtest_stanza(isodir)
-        cfg += self.__get_local_stanza(isodir)
+        #cfg += self.__get_local_stanza(isodir)
         cfg += self._get_isolinux_stanzas(isodir)
 
         cfgf = open(isodir + "/isolinux/isolinux.cfg", "w")
-        cfgf.write(cfg)
+        #cfgf.write(cfg.encode(sys.stdout.encoding))
+        cfgf.write(cfg.encode("cp866"))
         cfgf.close()
 
     def __copy_efi_files(self, isodir):
@@ -680,7 +747,7 @@
 
         shutil.copyfile(bootdir + "/vmlinuz-" + version,
                         destdir + "/vmlinuz")
-
+        
         if os.path.exists(bootdir + "/initramfs-" + version + ".img"):
             shutil.copyfile(bootdir + "/initramfs-" + version + ".img",
                             destdir + "/initrd.img")
@@ -758,15 +825,15 @@
 default=linux
 
 image=/ppc/ppc64/vmlinuz
-	label=linux64
-	alias=linux
-	initrd=/ppc/ppc64/initrd.img
-	read-only
+        label=linux64
+        alias=linux
+        initrd=/ppc/ppc64/initrd.img
+        read-only
 
 image=/ppc/ppc32/vmlinuz
-	label=linux32
-	initrd=/ppc/ppc32/initrd.img
-	read-only
+        label=linux32
+        initrd=/ppc/ppc32/initrd.img
+        read-only
 """ % args
 
         f = open(isodir + "/etc/yaboot.conf", "w")
diff -dNur livecd-tools-031.old/imgcreate/menuconfig.py livecd-tools-031/imgcreate/menuconfig.py
--- livecd-tools-031.old/imgcreate/menuconfig.py	1970-01-01 03:00:00.000000000 +0300
+++ livecd-tools-031/imgcreate/menuconfig.py	2010-07-30 16:31:26.230738881 +0400
@@ -0,0 +1,68 @@
+#!/usr/bin/env python
+
+import xml.parsers.expat
+
+class MenuConfig:
+  def __init__(self, menu_path):
+    self.menu_path = menu_path
+    self.xml_parser = xml.parsers.expat.ParserCreate()
+    self.tmp_menu_label = self.tmp_menu_extra_opts = self.menu_background_path =\
+    self.rus_font_path = self.product_name = self.welcome_message = ""
+    self.menu_lst = []
+    self.parse()
+ 
+  def _start_element(self, name, attrs):
+    if name == "item":
+      self.tmp_menu_label = attrs["name"]
+      self.xml_parser.CharacterDataHandler = self._char_data_item
+    elif name == "background_img_path":
+      self.xml_parser.CharacterDataHandler = self._char_data_image_path
+    elif name == "font_path":
+      self.xml_parser.CharacterDataHandler = self._char_data_rus_font_path
+    elif name == "product_name":
+      self.xml_parser.CharacterDataHandler = self._char_data_product_name
+    elif name == "welcome_message":
+      self.xml_parser.CharacterDataHandler = self._char_data_welcome_message
+      
+
+  def _end_element(self, name):
+    if name == "item":
+      self.menu_lst.append((self.tmp_menu_label , self.tmp_menu_extra_opts))
+      self.tmp_menu_extra_opts = ""
+      self.tmp_menu_label = ""
+
+  def _char_data_item(self, data):
+    data = data.strip()
+    if (data != ''):
+      self.tmp_menu_extra_opts += (" " + data)
+
+  def _char_data_image_path(self, data):
+    data = data.strip()
+    if (data != ''):
+      self.menu_background_path = data
+
+  def _char_data_rus_font_path(self, data):
+    data = data.strip()
+    if (data != ''):
+      self.rus_font_path = data
+
+  def _char_data_product_name(self, data):
+    data = data.strip()
+    if (data != ''):
+      self.product_name = data
+
+  def _char_data_welcome_message(self, data):
+    data = data.strip()
+    if (data != ''):
+      self.welcome_message = data
+
+  def parse(self):
+    self.xml_parser.StartElementHandler = self._start_element
+    self.xml_parser.EndElementHandler = self._end_element
+    self.xml_parser.ParseFile(open(self.menu_path))
+
+
+if __name__ == "__main__":
+  menu_parser = MenuConfig("menu_config.xml")
+  print menu_parser.menu_lst
+  print menu_parser.menu_background_path
diff -dNur livecd-tools-031.old/tools/livecd-creator livecd-tools-031/tools/livecd-creator
--- livecd-tools-031.old/tools/livecd-creator	2010-07-29 16:37:04.412016040 +0400
+++ livecd-tools-031/tools/livecd-creator	2010-07-30 16:31:26.231738641 +0400
@@ -41,6 +41,9 @@
                       help="Add packages to an existing live CD iso9660 image.")
     imgopt.add_option("-f", "--fslabel", type="string", dest="fs_label",
                       help="File system label (default based on config name)")
+    imgopt.add_option("-m", "--menu-config", type="string", dest="menu_cfg",
+		      help="Extra options for LiveCD menu")
+
     parser.add_option_group(imgopt)
 
     # options related to the config of your system
@@ -96,6 +99,11 @@
         print >> sys.stderr, "You must run livecd-creator as root"
         return 1
 
+    if options.menu_cfg:
+        menu_cfg_path = options.menu_cfg
+    else:
+        menu_cfg_path = ""
+
     if options.fs_label:
         fs_label = options.fs_label
         name = fs_label
@@ -111,7 +119,8 @@
 
     ks = imgcreate.read_kickstart(options.kscfg)
 
-    creator = imgcreate.LiveImageCreator(ks, name, fs_label)
+    #creator = imgcreate.LiveImageCreator(ks, name, fs_label)
+    creator = imgcreate.LiveImageCreator(ks, name, fs_label, menu_cfg_path=menu_cfg_path)
     creator.tmpdir = os.path.abspath(options.tmpdir)
     creator.skip_compression = options.skip_compression
     creator.skip_minimize = options.skip_minimize
diff -dNur livecd-tools-031.old/tools/livecd-iso-to-disk.sh livecd-tools-031/tools/livecd-iso-to-disk.sh
